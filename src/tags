!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
GENE_H	gene.h	11;"	d
Gene	gene.h	/^    Gene() {}$/;"	f	class:Gene
Gene	gene.h	/^class Gene {$/;"	c
GeneReader	gene.h	/^    GeneReader(std::istream& _stream) : stream(_stream) {};$/;"	f	class:GeneReader
GeneReader	gene.h	/^class GeneReader {$/;"	c
LenNum	mole.h	/^struct LenNum {$/;"	s
MAP_H	map.h	11;"	d
MINCNT	map.h	/^    int MINCNT;$/;"	m	class:Map
Map	map.h	/^     Map(double _mu, double _sigma, double _alpha, double _beta, int _MINCNT, string _outPrefix) : mu(_mu), sigma(_sigma), alpha(_alpha), beta(_beta), MINCNT(_MINCNT),outPrefix(_outPrefix) {}; $/;"	f	class:Map
Map	map.h	/^class Map {$/;"	c
MapRet	mole.h	/^struct MapRet {   $/;"	s
Mole	mole.h	/^    Mole() {} $/;"	f	class:Mole
Mole	mole.h	/^    explicit Mole(size_t _id) : id(_id) {$/;"	f	class:Mole
Mole	mole.h	/^class Mole {$/;"	c
MoleReader	mole.h	/^    MoleReader(std::istream& _stream) : stream(_stream) {};$/;"	f	class:MoleReader
MoleReader	mole.h	/^class MoleReader {$/;"	c
SplitString	SplitString.h	/^    SplitString(const string &_s){str = _s;}$/;"	f	class:SplitString
SplitString	SplitString.h	/^class SplitString$/;"	c
_SPLIT_STRING_H	SplitString.h	11;"	d
_TYPES_H	Types.h	11;"	d
alignGenePosition	mole.h	/^    pair <int,int> alignGenePosition;\/\/分子联配到基因上的起点和终点$/;"	m	struct:MapRet
alignLenNum	mole.h	/^    vector< pair<LenNum,LenNum> > alignLenNum;\/\/分子上某一段长度和数量对应基因上的某段长度和数量$/;"	m	struct:MapRet
alignMolePosition	mole.h	/^    pair <int,int> alignMolePosition;\/\/局部联配分子联配的起点和终点$/;"	m	struct:MapRet
alpha	map.h	/^    double alpha;$/;"	m	class:Map
beta	map.h	/^    double beta;$/;"	m	class:Map
change_parameter	map.cpp	/^bool Map::change_parameter(vector<Mole> & moleSet) {$/;"	f	class:Map
dis	gene.h	/^    std::vector < int > dis;$/;"	m	class:Gene
dis	mole.h	/^    std::vector < int > dis;  \/\/distance of Enzyme$/;"	m	class:Mole
enzymeDisNum	mole.h	/^    int enzymeDisNum;$/;"	m	class:Mole
geneMapPosition	mole.h	/^    vector< pair<int,int> > geneMapPosition;$/;"	m	struct:MapRet
getDis	gene.cpp	/^bool Gene::getDis() {$/;"	f	class:Gene
getDis	mole.cpp	/^bool Mole::getDis() {$/;"	f	class:Mole
get_background_distribution	map.cpp	/^void Map::get_background_distribution() {$/;"	f	class:Map
get_enzyme_dis_num	mole.h	/^    int get_enzyme_dis_num() const{ return dis.size(); }   $/;"	f	class:Mole
get_id	mole.h	/^    int get_id() const{ return id; }$/;"	f	class:Mole
id	mole.h	/^    int id;$/;"	m	class:Mole
label	mole.h	/^    bool label = false;\/\/全局map上没有$/;"	m	struct:MapRet
len	gene.h	/^    int len;$/;"	m	class:Gene
len	mole.h	/^    int len;$/;"	m	class:Mole
len	mole.h	/^    int len;$/;"	m	struct:LenNum
local_DP_score	map.cpp	/^bool Map::local_DP_score(Mole& mole, vector<int>& gene) {$/;"	f	class:Map
local_map_score	map.cpp	/^bool Map::local_map_score(vector<Mole>& moleSet,vector <int>& gene) {$/;"	f	class:Map
main	main.cpp	/^int main(int argc, char ** argv)$/;"	f
mapDis	map.h	/^    vector < int > mapDis;$/;"	m	class:Map
mapNum	map.h	/^    vector < pair < int,int > > mapNum;$/;"	m	class:Map
mapRet	mole.h	/^    MapRet mapRet;$/;"	m	class:Mole
mapRet_reset	mole.h	/^    void mapRet_reset() {$/;"	f	class:Mole
mapping_pos	mole.h	/^    vector<int> mapping_pos;  \/\/position on ref $/;"	m	class:Mole
moleMapPosition	mole.h	/^    vector< pair<int,int> > moleMapPosition;$/;"	m	struct:MapRet
mole_h__	mole.h	2;"	d
mole_reset	mole.h	/^    void mole_reset() {$/;"	f	class:Mole
mu	map.h	/^    double mu;$/;"	m	class:Map
num	mole.h	/^    int num;$/;"	m	struct:LenNum
operator =	mole.cpp	/^Mole& Mole::operator = (const Mole & o) {$/;"	f	class:Mole
optStr	main.cpp	/^static const char *optStr = "o:c:m:g:";$/;"	v	file:
outPrefix	map.h	/^    string outPrefix;\/\/输出文件路径$/;"	m	class:Map
pos	gene.h	/^    std::vector < long > pos;$/;"	m	class:Gene
pos	mole.h	/^    std::vector < long > pos;$/;"	m	class:Mole
print	gene.cpp	/^void Gene::print() {$/;"	f	class:Gene
print	mole.cpp	/^void Mole::print() {$/;"	f	class:Mole
printHelp	main.cpp	/^void printHelp() {$/;"	f
print_score	map.cpp	/^void Map::print_score(const string filename, const vector< Mole >& moleSet) {$/;"	f	class:Map
read	gene.cpp	/^bool GeneReader::read(Gene& gene) {$/;"	f	class:GeneReader
read	mole.cpp	/^bool MoleReader::read(Mole& mole) {$/;"	f	class:MoleReader
remove_noise	map.cpp	/^void Map::remove_noise(vector<Mole>& moleSet,vector<int>& gene) {$/;"	f	class:Map
reverseMole	mole.cpp	/^Mole Mole::reverseMole() {$/;"	f	class:Mole
score	mole.h	/^    double score;$/;"	m	struct:MapRet
sigma	map.h	/^    double sigma;$/;"	m	class:Map
split2Dbl	SplitString.cc	/^vector<double> SplitString::split2Dbl(const char *delim, int rep)$/;"	f	class:SplitString
split2Int	SplitString.cc	/^vector<int> SplitString::split2Int(const char *delim, int rep)$/;"	f	class:SplitString
split2Str	SplitString.cc	/^vector<string> SplitString::split2Str(const char *delim, int rep) $/;"	f	class:SplitString
str	SplitString.h	/^    string str;$/;"	m	class:SplitString
stream	gene.h	/^    std::istream& stream;$/;"	m	class:GeneReader
stream	mole.h	/^    std::istream& stream;$/;"	m	class:MoleReader
validScore	map.cpp	/^double Map::validScore(int a, int b) {$/;"	f	class:Map
validScore	map.cpp	/^double Map::validScore(int moleB, int moleE, int geneB, int geneE, const vector<int> & mole, const vector<int> & gene) {$/;"	f	class:Map
whole_DP_score	map.cpp	/^bool Map::whole_DP_score(Mole& mole, vector<int>& gene) {$/;"	f	class:Map
whole_map_score	map.cpp	/^bool Map::whole_map_score(vector<Mole>& moleSet,vector <int>& gene) {$/;"	f	class:Map
~Gene	gene.h	/^    virtual ~Gene() {}$/;"	f	class:Gene
~Mole	mole.h	/^    virtual ~Mole() {}$/;"	f	class:Mole
